# # #STEP 1: BUILD
# # # Environemnt to install flutter and build web
# # FROM debian:latest AS build-env

# # ARG APP_LOCATION=/app/
# # RUN mkdir $APP_LOCATION
# # COPY . $APP_LOCATION
# # WORKDIR $APP_LOCATION

# # #STEP 2: DEPLOY
# # #use nginx to deploy
# # FROM nginx:1.25.2-alpine

# # #copy the info of the builded web app to nginx
# # COPY --from=build-env /app/build/web /usr/share/nginx/html

# # #Expose port and run nginx
# # EXPOSE 80
# # CMD ["nginx", "-g", "daemon off;"]


# # Install Operating system and dependencies
FROM ubuntu:20.04  AS build-env
ARG DEBIAN_FRONTEND=noninteractive

RUN apt-get update 
RUN apt-get install -y curl git wget unzip libgconf-2-4 gdb libstdc++6 libglu1-mesa fonts-droid-fallback lib32stdc++6 python3
RUN apt-get clean

# download Flutter SDK from Flutter Github repo
RUN git clone https://github.com/flutter/flutter.git /usr/local/flutter

# Set flutter environment path
ENV PATH="/usr/local/flutter/bin:/usr/local/flutter/bin/cache/dart-sdk/bin:${PATH}"

# Run flutter doctor
RUN flutter doctor

# Enable flutter web
RUN flutter channel master
RUN flutter upgrade
RUN flutter config --enable-web

# Copy files to container and build
RUN mkdir /app/
COPY . /app/
WORKDIR /app/
RUN flutter build web 
# RUN flutter run -d web-server --web-hostname 0.0.0.0 --web-port 8080





# # FROM  cirrusci/flutter:release as build

# RUN apt update
# RUN apt install -y tmux inotify-tools net-tools

# # RUN mkdir /app/
# # WORKDIR /app/

# # COPY . /app/
# COPY ./entrypoint.sh ./entrypoint.sh

# EXPOSE 8080
# RUN flutter upgrade
# RUN flutter pub get
# RUN chmod +x entrypoint.sh

# ENTRYPOINT ["/bin/bash", "./entrypoint.sh"]


#use nginx to deploy
FROM nginx:1.25.2-alpine

#copy the info of the builded web app to nginx
COPY --from=build-env /app/build/web /usr/share/nginx/html

#Expose port and run nginx
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]